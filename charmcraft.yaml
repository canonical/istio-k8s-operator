# Copyright 2024 Canonical Ltd.
# See LICENSE file for licensing details.

name: istio-k8s
type: charm
title: Istio
summary: A Juju charm to operate an Istio service mesh
description: |
  istio-core deploys and manages the control plane of an Istio service mesh on Kubernetes, 
  enabling configuring and managing Istio through Juju.

config:
  options:
    ambient:
      type: boolean
      default: true
      description: >
        Enable Istio's ambient mode.  See https://istio.io/latest/docs/ambient/overview/ for details.
    auto-allow-waypoint-policy:
      type: boolean
      default: true
      description: >
        For workloads on an ambient mesh with traffic routed through a waypoint, that traffic passing through the 
        waypoint to the workload can be controlled by L4 authorization policies like any other traffic.  This generally
        means that, to allow traffic from a waypoint to a workload, users must create L4 authorization policies between
        the waypoint and the workload.  
        If this option is set to true, Istio will create synthetic authorization policies allowing waypoints to 
        communicate with their workloads automatically.  
        If this option is set to false, users must create L4 authorization policies between waypoints and the workloads.
        See [PILOT_AUTO_ALLOW_WAYPOINT_POLICY]https://istio.io/latest/docs/reference/commands/pilot-discovery/#envvars
        for more detail.
    platform:
      type: string
      default: 'microk8s'
      description: >
        Some Kubernetes platforms require platform-specific configuration for Istio to function correctly.  This is 
        described in more detail upstream in [Platform Prerequisites](https://istio.io/latest/docs/ambient/install/platform-prerequisites/).
        This configuration option maps to the `values.global.platform` field in the Istio Helm chart, and can be used to
        specify the platform-specific configuration for the Kubernetes platform on which the charm is deployed.  If left
        blank, no value of `values.global.platform` will be set.

assumes:
  - k8s-api

bases:
  - build-on:
    - name: ubuntu
      channel: "22.04"
      architectures: ["amd64"]
    run-on:
    - name: ubuntu
      channel: "22.04"
      architectures: ["amd64"]
  - build-on:
    - name: ubuntu
      channel: "22.04"
      architectures: ["arm64"]
    run-on:
    - name: ubuntu
      channel: "22.04"
      architectures: ["arm64"]



containers:
  metrics-proxy:
    resource: metrics-proxy-image

provides:
  grafana-dashboard:
    interface: grafana_dashboard
  istio-metadata:
    interface: istio_metadata
  metrics-endpoint:
    interface: prometheus_scrape

requires:
  charm-tracing:
    interface: tracing
    limit: 1
    description: |
      Enables sending charm traces to a distributed tracing backend, such as Tempo.
  workload-tracing:
    interface: tracing
    limit: 1
    description: |
      Enables sending workload traces from on-mesh workloads to a distributed tracing backend, such as Tempo.
      
      In ambient mode, traces are generated at the L7 layer by a waypoint proxy. To enable this, you must deploy
      the waypoint proxy charm (i.e https://github.com/canonical/istio-beacon-k8s-operator) with --model-on-mesh=true
      to collect traces for all workloads on the mesh. Alternatively, if you prefer to limit tracing to specific workloads, 
      you can relate the beacon charm to a particular charm instead of applying --model-on-mesh=true to the entire model.
  istio-ingress-config:
    interface: istio_ingress_config
    description: |
      Provides an interface for exchanging Istio ingress configuration,
      including external authorizer configuration details.

parts:
  charm:
    plugin: charm
    # include rustc and cargo to compile pydantic
    build-packages: [git, rustc, cargo]
    charm-binary-python-packages: ["pydantic>=2", "cryptography", "jsonschema", "opentelemetry-exporter-otlp-proto-http==1.21.0"]
  istioctl:
    plugin: dump
    source: https://github.com/istio/istio/releases/download/1.24.0/istioctl-1.24.0-linux-amd64.tar.gz
    source-type: tar


resources:
  metrics-proxy-image:
    type: oci-image
    description: Metrics Proxy OCI image
    # TODO: change below to point at the correct image once metrics-proxy rock is onboarded
    # see: https://github.com/canonical/oci-factory/issues/268
    upstream-source: docker.io/ibraaoad/metrics-proxy:v0.1.0