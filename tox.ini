# Copyright 2024 Canonical Ltd.
# See LICENSE file for licensing details.

[tox]
skip_missing_interpreters = True
envlist = lint, static-{charm}, unit, scenario, integration

[vars]
src_path = {toxinidir}/src
lib_path = {toxinidir}/lib/charms/istio_k8s
tst_path = {toxinidir}/tests
all_path = {[vars]src_path} {[vars]tst_path} {[vars]lib_path}

[testenv]
basepython = python3
setenv =
  PYTHONPATH = {toxinidir}:{toxinidir}/lib:{[vars]src_path}
  PYTHONBREAKPOINT=ipdb.set_trace
  PY_COLORS=1

[testenv:fmt]
description = Apply coding style standards to code
deps =
    black
    ruff
commands =
    ruff check --fix {[vars]all_path}
    black {[vars]all_path}

[testenv:lint]
description = Check code against coding style standards
deps =
    black
    ruff
    codespell
commands =
    codespell {toxinidir} --skip {toxinidir}/src/manifests
    ruff check {[vars]all_path}
    black --check --diff {[vars]all_path}

[testenv:static-{charm,lib}]
skip_install=True
description = Run static analysis checks
deps =
    pyright
    -r {toxinidir}/requirements.txt
commands =
    charm: pyright {[vars]src_path}
    lib:

[testenv:unit]
description = Run unit tests
deps =
    pytest
    pytest-mock
    coverage[toml]
    -r {toxinidir}/requirements.txt
commands =
    coverage run \
      --source={[vars]src_path} \
      -m pytest -v --tb native --log-cli-level=INFO -s {posargs} {[vars]tst_path}/unit
    coverage report -m

[testenv:scenario]
description = Run scenario tests
deps =
    -r{toxinidir}/requirements.txt
    pytest
    ops-scenario
commands =
    pytest -vv --tb native --log-cli-level=INFO -s {posargs} {[vars]tst_path}/scenario

[testenv:integration]
description = Run integration tests
deps =
    pytest
    pytest-asyncio==0.21.2
    juju
    pytest-operator
    -r {toxinidir}/requirements.txt
commands =
    pytest -v --tb native --log-cli-level=INFO -s {posargs} {[vars]tst_path}/integration

[testenv:check]
skip_install=True
depends =
    lint
    static
